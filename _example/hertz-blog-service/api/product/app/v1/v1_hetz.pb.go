// Code generated by github.com/ringsaturn/protoc-gen-go-hertz. DO NOT EDIT.

package v1

import (
	context "context"
	app "github.com/cloudwego/hertz/pkg/app"
	server "github.com/cloudwego/hertz/pkg/app/server"
	utils "github.com/cloudwego/hertz/pkg/common/utils"
	http "net/http"
)

// context.context.
// http.http.

// app.app.
// server.server.
// utils.utils.

type BlogServiceHTTPServer interface {
	CreateArticle(context.Context, *CreateArticleRequest) (*CreateArticleResponse, error)

	GetArticles(context.Context, *GetArticlesRequest) (*GetArticlesResponse, error)
}

func RegisterBlogServiceHTTPServer(h *server.Hertz, srv BlogServiceHTTPServer) {
	s := BlogService{
		server: srv,
		h:      h,
	}
	s.RegisterService()
}

type BlogService struct {
	server BlogServiceHTTPServer
	h      *server.Hertz
}

func (s *BlogService) GetArticles_0(c context.Context, ctx *app.RequestContext) {
	var in GetArticlesRequest

	if err := ctx.BindAndValidate(&in); err != nil {
		ctx.JSON(http.StatusBadRequest, utils.H{"error": err.Error()})
		return
	}
	out, err := s.server.(BlogServiceHTTPServer).GetArticles(c, &in)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, utils.H{"error": err.Error()})
		return
	}

	ctx.JSON(http.StatusOK, out)
}

func (s *BlogService) GetArticles_1(c context.Context, ctx *app.RequestContext) {
	var in GetArticlesRequest

	if err := ctx.BindAndValidate(&in); err != nil {
		ctx.JSON(http.StatusBadRequest, utils.H{"error": err.Error()})
		return
	}
	out, err := s.server.(BlogServiceHTTPServer).GetArticles(c, &in)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, utils.H{"error": err.Error()})
		return
	}

	ctx.JSON(http.StatusOK, out)
}

func (s *BlogService) CreateArticle_0(c context.Context, ctx *app.RequestContext) {
	var in CreateArticleRequest

	if err := ctx.BindAndValidate(&in); err != nil {
		ctx.JSON(http.StatusBadRequest, utils.H{"error": err.Error()})
		return
	}
	out, err := s.server.(BlogServiceHTTPServer).CreateArticle(c, &in)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, utils.H{"error": err.Error()})
		return
	}

	ctx.JSON(http.StatusOK, out)
}

func (s *BlogService) RegisterService() {

	s.h.Handle("GET", "/v1/author/:author_id/articles", s.GetArticles_0)

	s.h.Handle("GET", "/v1/articles", s.GetArticles_1)

	s.h.Handle("POST", "/v1/author/:author_id/articles", s.CreateArticle_0)

}
